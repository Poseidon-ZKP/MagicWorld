/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "DecryptPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecryptPairing__factory>;
    getContractFactory(
      name: "DecryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecryptVerifier__factory>;
    getContractFactory(
      name: "ExamplePairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExamplePairing__factory>;
    getContractFactory(
      name: "ExampleVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleVerifier__factory>;
    getContractFactory(
      name: "GroupPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GroupPairing__factory>;
    getContractFactory(
      name: "GroupVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GroupVerifier__factory>;
    getContractFactory(
      name: "Shuffle_encrypt_v2Pairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encrypt_v2Pairing__factory>;
    getContractFactory(
      name: "Shuffle_encrypt_v2Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encrypt_v2Verifier__factory>;
    getContractFactory(
      name: "ShuffleEncryptV2VerifierKey",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleEncryptV2VerifierKey__factory>;
    getContractFactory(
      name: "Shuffle_encryptPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptPairing__factory>;
    getContractFactory(
      name: "Shuffle_encryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle_encryptVerifier__factory>;
    getContractFactory(
      name: "ShuffleEncryptVerifierKey0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleEncryptVerifierKey0__factory>;
    getContractFactory(
      name: "ShuffleEncryptVerifierKey1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShuffleEncryptVerifierKey1__factory>;
    getContractFactory(
      name: "SignalPairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignalPairing__factory>;
    getContractFactory(
      name: "SignalVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignalVerifier__factory>;
    getContractFactory(
      name: "SemaphoreGroups",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SemaphoreGroups__factory>;
    getContractFactory(
      name: "ISemaphoreGroups",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISemaphoreGroups__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT6__factory>;
    getContractFactory(
      name: "Decrypt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Decrypt__factory>;
    getContractFactory(
      name: "Example",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Example__factory>;
    getContractFactory(
      name: "Group",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Group__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IGroup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGroup__factory>;
    getContractFactory(
      name: "CurveBabyJubJub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveBabyJubJub__factory>;
    getContractFactory(
      name: "IDecryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDecryptVerifier__factory>;
    getContractFactory(
      name: "IShuffleEncryptVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IShuffleEncryptVerifier__factory>;
    getContractFactory(
      name: "Pairing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pairing__factory>;
    getContractFactory(
      name: "Shuffle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Shuffle__factory>;
    getContractFactory(
      name: "ISignal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignal__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "Signal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signal__factory>;
    getContractFactory(
      name: "VoteNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteNFT__factory>;
    getContractFactory(
      name: "Vote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vote__factory>;

    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "DecryptPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DecryptPairing>;
    getContractAt(
      name: "DecryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DecryptVerifier>;
    getContractAt(
      name: "ExamplePairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExamplePairing>;
    getContractAt(
      name: "ExampleVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleVerifier>;
    getContractAt(
      name: "GroupPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GroupPairing>;
    getContractAt(
      name: "GroupVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GroupVerifier>;
    getContractAt(
      name: "Shuffle_encrypt_v2Pairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encrypt_v2Pairing>;
    getContractAt(
      name: "Shuffle_encrypt_v2Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encrypt_v2Verifier>;
    getContractAt(
      name: "ShuffleEncryptV2VerifierKey",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleEncryptV2VerifierKey>;
    getContractAt(
      name: "Shuffle_encryptPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptPairing>;
    getContractAt(
      name: "Shuffle_encryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle_encryptVerifier>;
    getContractAt(
      name: "ShuffleEncryptVerifierKey0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleEncryptVerifierKey0>;
    getContractAt(
      name: "ShuffleEncryptVerifierKey1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShuffleEncryptVerifierKey1>;
    getContractAt(
      name: "SignalPairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignalPairing>;
    getContractAt(
      name: "SignalVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignalVerifier>;
    getContractAt(
      name: "SemaphoreGroups",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SemaphoreGroups>;
    getContractAt(
      name: "ISemaphoreGroups",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISemaphoreGroups>;
    getContractAt(
      name: "PoseidonT3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "PoseidonT6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT6>;
    getContractAt(
      name: "Decrypt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Decrypt>;
    getContractAt(
      name: "Example",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Example>;
    getContractAt(
      name: "Group",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Group>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IGroup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGroup>;
    getContractAt(
      name: "CurveBabyJubJub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveBabyJubJub>;
    getContractAt(
      name: "IDecryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDecryptVerifier>;
    getContractAt(
      name: "IShuffleEncryptVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IShuffleEncryptVerifier>;
    getContractAt(
      name: "Pairing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pairing>;
    getContractAt(
      name: "Shuffle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Shuffle>;
    getContractAt(
      name: "ISignal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignal>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "Signal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Signal>;
    getContractAt(
      name: "VoteNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteNFT>;
    getContractAt(
      name: "Vote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vote>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
