/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Vote,
  VoteInterface,
} from "../../../../contracts/voting/vote.sol/Vote";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGroup",
        name: "_group",
        type: "address",
      },
      {
        internalType: "contract ISignal",
        name: "_signal",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GROUP_ID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "identityCommitment",
        type: "uint256",
      },
    ],
    name: "addMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "merkleTreeDepth",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "createGroup",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "group",
    outputs: [
      {
        internalType: "contract IGroup",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signal",
    outputs: [
      {
        internalType: "contract ISignal",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rc",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "groupId",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "group_proof",
        type: "uint256[8]",
      },
      {
        internalType: "bytes32",
        name: "voteMsg",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nullifierHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "externalNullifier",
        type: "uint256",
      },
      {
        internalType: "uint256[8]",
        name: "signal_proof",
        type: "uint256[8]",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "voteStat",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000da638038062000da68339818101604052810190620000379190620000f6565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006003819055505050620001c7565b600081519050620000d98162000193565b92915050565b600081519050620000f081620001ad565b92915050565b600080604083850312156200010a57600080fd5b60006200011a85828601620000c8565b92505060206200012d85828601620000df565b9150509250929050565b6000620001448262000173565b9050919050565b6000620001588262000137565b9050919050565b60006200016c8262000137565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200019e816200014b565b8114620001aa57600080fd5b50565b620001b8816200015f565b8114620001c457600080fd5b50565b610bcf80620001d76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063640d090b1161005b578063640d090b146100da5780637cdac869146100f8578063bdf4021b14610128578063c96e71fb146101445761007d565b80631783efc31461008257806329e7ef2d1461009e5780634dd9c0b5146100bc575b600080fd5b61009c60048036038101906100979190610665565b610174565b005b6100a6610205565b6040516100b391906107e6565b60405180910390f35b6100c4610229565b6040516100d1919061085c565b60405180910390f35b6100e261022f565b6040516100ef9190610801565b60405180910390f35b610112600480360381019061010d9190610629565b610255565b60405161011f919061085c565b60405180910390f35b610142600480360381019061013d91906106a1565b61027a565b005b61015e600480360381019061015991906105ed565b6104a1565b60405161016b919061085c565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631783efc383836040518363ffffffff1660e01b81526004016101cf9291906108cb565b600060405180830381600087803b1580156101e957600080fd5b505af11580156101fd573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f452ffa28888886040518463ffffffff1660e01b81526004016102d79392919061092b565b602060405180830381600087803b1580156102f157600080fd5b505af1158015610305573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032991906105c4565b610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f9061081c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346cf37b688868686866040518663ffffffff1660e01b81526004016103cb959493929190610877565b602060405180830381600087803b1580156103e557600080fd5b505af11580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906105c4565b61045c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104539061083c565b60405180910390fd5b600160026000888152602001908152602001600020600086815260200190815260200160002060008282546104919190610974565b9250508190555050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c1121416003600081546104ef90610a73565b91905081905585856040518463ffffffff1660e01b8152600401610515939291906108f4565b600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b50505050600354905092915050565b60008135905061056181610b3d565b92915050565b60008190508260206008028201111561057f57600080fd5b92915050565b60008151905061059481610b54565b92915050565b6000813590506105a981610b6b565b92915050565b6000813590506105be81610b82565b92915050565b6000602082840312156105d657600080fd5b60006105e484828501610585565b91505092915050565b6000806040838503121561060057600080fd5b600061060e858286016105af565b925050602061061f85828601610552565b9150509250929050565b6000806040838503121561063c57600080fd5b600061064a858286016105af565b925050602061065b8582860161059a565b9150509250929050565b6000806040838503121561067857600080fd5b6000610686858286016105af565b9250506020610697858286016105af565b9150509250929050565b60008060008060008060006102a0888a0312156106bd57600080fd5b60006106cb8a828b016105af565b97505060206106dc8a828b016105af565b96505060406106ed8a828b01610567565b9550506101406106ff8a828b0161059a565b9450506101606107118a828b016105af565b9350506101806107238a828b016105af565b9250506101a06107358a828b01610567565b91505092959891949750929550565b61074d816109ca565b82525050565b6107606101008383610a64565b5050565b61076d816109e8565b82525050565b61077c81610a1c565b82525050565b61078b81610a40565b82525050565b600061079e600f83610963565b91506107a982610aeb565b602082019050919050565b60006107c1600b83610963565b91506107cc82610b14565b602082019050919050565b6107e081610a12565b82525050565b60006020820190506107fb6000830184610773565b92915050565b60006020820190506108166000830184610782565b92915050565b6000602082019050818103600083015261083581610791565b9050919050565b60006020820190508181036000830152610855816107b4565b9050919050565b600060208201905061087160008301846107d7565b92915050565b60006101808201905061088d60008301886107d7565b61089a6020830187610764565b6108a760408301866107d7565b6108b460608301856107d7565b6108c16080830184610753565b9695505050505050565b60006040820190506108e060008301856107d7565b6108ed60208301846107d7565b9392505050565b600060608201905061090960008301866107d7565b61091660208301856107d7565b6109236040830184610744565b949350505050565b60006101408201905061094160008301866107d7565b61094e60208301856107d7565b61095b6040830184610753565b949350505050565b600082825260208201905092915050565b600061097f82610a12565b915061098a83610a12565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109bf576109be610abc565b5b828201905092915050565b60006109d5826109f2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a2782610a2e565b9050919050565b6000610a39826109f2565b9050919050565b6000610a4b82610a52565b9050919050565b6000610a5d826109f2565b9050919050565b82818337600083830152505050565b6000610a7e82610a12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab157610ab0610abc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f67726f75702070726f6f66206572720000000000000000000000000000000000600082015250565b7f7369676e616c206661696c000000000000000000000000000000000000000000600082015250565b610b46816109ca565b8114610b5157600080fd5b50565b610b5d816109dc565b8114610b6857600080fd5b50565b610b74816109e8565b8114610b7f57600080fd5b50565b610b8b81610a12565b8114610b9657600080fd5b5056fea2646970667358221220b8ec4b9d1c150c11efa67a21da0b5359ef86995a6b133c528a9bdb8202d854a064736f6c63430008040033";

type VoteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VoteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vote__factory extends ContractFactory {
  constructor(...args: VoteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _group: PromiseOrValue<string>,
    _signal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vote> {
    return super.deploy(_group, _signal, overrides || {}) as Promise<Vote>;
  }
  override getDeployTransaction(
    _group: PromiseOrValue<string>,
    _signal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_group, _signal, overrides || {});
  }
  override attach(address: string): Vote {
    return super.attach(address) as Vote;
  }
  override connect(signer: Signer): Vote__factory {
    return super.connect(signer) as Vote__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VoteInterface {
    return new utils.Interface(_abi) as VoteInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vote {
    return new Contract(address, _abi, signerOrProvider) as Vote;
  }
}
