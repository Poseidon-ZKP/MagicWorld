/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  GroupPairing,
  GroupPairingInterface,
} from "../../../../../@p0x-labs/poseidon-zk-circuits/contracts/group_verifier.sol/GroupPairing";

const _abi = [
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d69751a64d8d21b52d98e1312ad2c4301bfbf8b6e8769b1f6f5df0491e07d6c764736f6c63430008040033";

type GroupPairingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GroupPairingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GroupPairing__factory extends ContractFactory {
  constructor(...args: GroupPairingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GroupPairing> {
    return super.deploy(overrides || {}) as Promise<GroupPairing>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GroupPairing {
    return super.attach(address) as GroupPairing;
  }
  override connect(signer: Signer): GroupPairing__factory {
    return super.connect(signer) as GroupPairing__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GroupPairingInterface {
    return new utils.Interface(_abi) as GroupPairingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GroupPairing {
    return new Contract(address, _abi, signerOrProvider) as GroupPairing;
  }
}
