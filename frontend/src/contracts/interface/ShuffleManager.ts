/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type CardStruct = {
  X: PromiseOrValue<BigNumberish>;
  Y: PromiseOrValue<BigNumberish>;
};

export type CardStructOutput = [BigNumber, BigNumber] & {
  X: BigNumber;
  Y: BigNumber;
};

export type CompressedDeckStruct = {
  config: PromiseOrValue<BigNumberish>;
  X0: PromiseOrValue<BigNumberish>[];
  X1: PromiseOrValue<BigNumberish>[];
  selector0: BitMaps.BitMap256Struct;
  selector1: BitMaps.BitMap256Struct;
};

export type CompressedDeckStructOutput = [
  number,
  BigNumber[],
  BigNumber[],
  BitMaps.BitMap256StructOutput,
  BitMaps.BitMap256StructOutput
] & {
  config: number;
  X0: BigNumber[];
  X1: BigNumber[];
  selector0: BitMaps.BitMap256StructOutput;
  selector1: BitMaps.BitMap256StructOutput;
};

export declare namespace BitMaps {
  export type BitMap256Struct = { _data: PromiseOrValue<BigNumberish> };

  export type BitMap256StructOutput = [BigNumber] & { _data: BigNumber };
}

export interface ShuffleManagerInterface extends utils.Interface {
  functions: {
    "INVALID_INDEX()": FunctionFragment;
    "cardConfig(uint256)": FunctionFragment;
    "createShuffleGame(uint8)": FunctionFragment;
    "curPlayerIndex(uint256)": FunctionFragment;
    "dealCardsTo(uint256,(uint256),uint256,bytes)": FunctionFragment;
    "decryptVerifier()": FunctionFragment;
    "endGame(uint256)": FunctionFragment;
    "error(uint256,bytes)": FunctionFragment;
    "gameState(uint256)": FunctionFragment;
    "getDecryptRecord(uint256,uint256)": FunctionFragment;
    "getNumCards(uint256)": FunctionFragment;
    "getPlayerIdx(uint256,address)": FunctionFragment;
    "largestGameId()": FunctionFragment;
    "openCards(uint256,uint256,uint8,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerDealCards(uint256,uint256[8][],(uint256,uint256)[],uint256[2][])": FunctionFragment;
    "playerOpenCards(uint256,(uint256),uint256[8][],(uint256,uint256)[])": FunctionFragment;
    "playerRegister(uint256,address,uint256,uint256)": FunctionFragment;
    "playerShuffle(uint256,uint256[8],(uint8,uint256[],uint256[],(uint256),(uint256)))": FunctionFragment;
    "queryAggregatedPk(uint256)": FunctionFragment;
    "queryCardValue(uint256,uint256)": FunctionFragment;
    "queryDeck(uint256)": FunctionFragment;
    "register(uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shuffle(uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_INDEX"
      | "cardConfig"
      | "createShuffleGame"
      | "curPlayerIndex"
      | "dealCardsTo"
      | "decryptVerifier"
      | "endGame"
      | "error"
      | "gameState"
      | "getDecryptRecord"
      | "getNumCards"
      | "getPlayerIdx"
      | "largestGameId"
      | "openCards"
      | "owner"
      | "playerDealCards"
      | "playerOpenCards"
      | "playerRegister"
      | "playerShuffle"
      | "queryAggregatedPk"
      | "queryCardValue"
      | "queryDeck"
      | "register"
      | "renounceOwnership"
      | "shuffle"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cardConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createShuffleGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "curPlayerIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dealCardsTo",
    values: [
      PromiseOrValue<BigNumberish>,
      BitMaps.BitMap256Struct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "error",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameState",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptRecord",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumCards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerIdx",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "largestGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openCards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerDealCards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[][],
      CardStruct[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playerOpenCards",
    values: [
      PromiseOrValue<BigNumberish>,
      BitMaps.BitMap256Struct,
      PromiseOrValue<BigNumberish>[][],
      CardStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playerRegister",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playerShuffle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      CompressedDeckStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryAggregatedPk",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryCardValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryDeck",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shuffle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "INVALID_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cardConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createShuffleGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curPlayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealCardsTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "error", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "largestGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openCards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerDealCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerOpenCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerShuffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryAggregatedPk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryCardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryDeck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shuffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerTurn(uint256,uint256,uint8)": EventFragment;
    "Register(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerTurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlayerTurnEventObject {
  gameId: BigNumber;
  playerIndex: BigNumber;
  state: number;
}
export type PlayerTurnEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  PlayerTurnEventObject
>;

export type PlayerTurnEventFilter = TypedEventFilter<PlayerTurnEvent>;

export interface RegisterEventObject {
  gameId: BigNumber;
  playerId: BigNumber;
  playerAddr: string;
}
export type RegisterEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  RegisterEventObject
>;

export type RegisterEventFilter = TypedEventFilter<RegisterEvent>;

export interface ShuffleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShuffleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    cardConfig(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    createShuffleGame(
      numPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    curPlayerIndex(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dealCardsTo(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      playerId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decryptVerifier(overrides?: CallOverrides): Promise<[string]>;

    endGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    error(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameState(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDecryptRecord(
      gameId: PromiseOrValue<BigNumberish>,
      cardIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BitMaps.BitMap256StructOutput]>;

    getNumCards(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerIdx(
      gameId: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    largestGameId(overrides?: CallOverrides): Promise<[BigNumber]>;

    openCards(
      gameId: PromiseOrValue<BigNumberish>,
      playerId: PromiseOrValue<BigNumberish>,
      openningNum: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerDealCards(
      gameId: PromiseOrValue<BigNumberish>,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      initDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerOpenCards(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerRegister(
      gameId: PromiseOrValue<BigNumberish>,
      signingAddr: PromiseOrValue<string>,
      pkX: PromiseOrValue<BigNumberish>,
      pkY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerShuffle(
      gameId: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      compDeck: CompressedDeckStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryAggregatedPk(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { px: BigNumber; py: BigNumber }>;

    queryCardValue(
      gameId: PromiseOrValue<BigNumberish>,
      cardIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queryDeck(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BitMaps.BitMap256StructOutput,
        BitMaps.BitMap256StructOutput,
        BitMaps.BitMap256StructOutput
      ] & {
        X0: BigNumber[];
        X1: BigNumber[];
        Y0: BigNumber[];
        Y1: BigNumber[];
        selector0: BitMaps.BitMap256StructOutput;
        selector1: BitMaps.BitMap256StructOutput;
        cardsToDeal: BitMaps.BitMap256StructOutput;
      }
    >;

    register(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shuffle(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  cardConfig(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  createShuffleGame(
    numPlayers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  curPlayerIndex(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dealCardsTo(
    gameId: PromiseOrValue<BigNumberish>,
    cards: BitMaps.BitMap256Struct,
    playerId: PromiseOrValue<BigNumberish>,
    next: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decryptVerifier(overrides?: CallOverrides): Promise<string>;

  endGame(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  error(
    gameId: PromiseOrValue<BigNumberish>,
    next: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameState(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDecryptRecord(
    gameId: PromiseOrValue<BigNumberish>,
    cardIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BitMaps.BitMap256StructOutput>;

  getNumCards(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerIdx(
    gameId: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  largestGameId(overrides?: CallOverrides): Promise<BigNumber>;

  openCards(
    gameId: PromiseOrValue<BigNumberish>,
    playerId: PromiseOrValue<BigNumberish>,
    openningNum: PromiseOrValue<BigNumberish>,
    next: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerDealCards(
    gameId: PromiseOrValue<BigNumberish>,
    proofs: PromiseOrValue<BigNumberish>[][],
    decryptedCards: CardStruct[],
    initDeltas: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerOpenCards(
    gameId: PromiseOrValue<BigNumberish>,
    cards: BitMaps.BitMap256Struct,
    proofs: PromiseOrValue<BigNumberish>[][],
    decryptedCards: CardStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerRegister(
    gameId: PromiseOrValue<BigNumberish>,
    signingAddr: PromiseOrValue<string>,
    pkX: PromiseOrValue<BigNumberish>,
    pkY: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerShuffle(
    gameId: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    compDeck: CompressedDeckStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryAggregatedPk(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { px: BigNumber; py: BigNumber }>;

  queryCardValue(
    gameId: PromiseOrValue<BigNumberish>,
    cardIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queryDeck(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BitMaps.BitMap256StructOutput,
      BitMaps.BitMap256StructOutput,
      BitMaps.BitMap256StructOutput
    ] & {
      X0: BigNumber[];
      X1: BigNumber[];
      Y0: BigNumber[];
      Y1: BigNumber[];
      selector0: BitMaps.BitMap256StructOutput;
      selector1: BitMaps.BitMap256StructOutput;
      cardsToDeal: BitMaps.BitMap256StructOutput;
    }
  >;

  register(
    gameId: PromiseOrValue<BigNumberish>,
    next: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shuffle(
    gameId: PromiseOrValue<BigNumberish>,
    next: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    cardConfig(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    createShuffleGame(
      numPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curPlayerIndex(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealCardsTo(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      playerId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    decryptVerifier(overrides?: CallOverrides): Promise<string>;

    endGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    error(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gameState(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecryptRecord(
      gameId: PromiseOrValue<BigNumberish>,
      cardIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BitMaps.BitMap256StructOutput>;

    getNumCards(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerIdx(
      gameId: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    largestGameId(overrides?: CallOverrides): Promise<BigNumber>;

    openCards(
      gameId: PromiseOrValue<BigNumberish>,
      playerId: PromiseOrValue<BigNumberish>,
      openningNum: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerDealCards(
      gameId: PromiseOrValue<BigNumberish>,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      initDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: CallOverrides
    ): Promise<void>;

    playerOpenCards(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    playerRegister(
      gameId: PromiseOrValue<BigNumberish>,
      signingAddr: PromiseOrValue<string>,
      pkX: PromiseOrValue<BigNumberish>,
      pkY: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerShuffle(
      gameId: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      compDeck: CompressedDeckStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    queryAggregatedPk(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { px: BigNumber; py: BigNumber }>;

    queryCardValue(
      gameId: PromiseOrValue<BigNumberish>,
      cardIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryDeck(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BitMaps.BitMap256StructOutput,
        BitMaps.BitMap256StructOutput,
        BitMaps.BitMap256StructOutput
      ] & {
        X0: BigNumber[];
        X1: BigNumber[];
        Y0: BigNumber[];
        Y1: BigNumber[];
        selector0: BitMaps.BitMap256StructOutput;
        selector1: BitMaps.BitMap256StructOutput;
        cardsToDeal: BitMaps.BitMap256StructOutput;
      }
    >;

    register(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    shuffle(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlayerTurn(uint256,uint256,uint8)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      playerIndex?: null,
      state?: null
    ): PlayerTurnEventFilter;
    PlayerTurn(
      gameId?: PromiseOrValue<BigNumberish> | null,
      playerIndex?: null,
      state?: null
    ): PlayerTurnEventFilter;

    "Register(uint256,uint256,address)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      playerId?: null,
      playerAddr?: null
    ): RegisterEventFilter;
    Register(
      gameId?: PromiseOrValue<BigNumberish> | null,
      playerId?: null,
      playerAddr?: null
    ): RegisterEventFilter;
  };

  estimateGas: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    cardConfig(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createShuffleGame(
      numPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    curPlayerIndex(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dealCardsTo(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      playerId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decryptVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    endGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    error(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameState(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecryptRecord(
      gameId: PromiseOrValue<BigNumberish>,
      cardIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumCards(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerIdx(
      gameId: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    largestGameId(overrides?: CallOverrides): Promise<BigNumber>;

    openCards(
      gameId: PromiseOrValue<BigNumberish>,
      playerId: PromiseOrValue<BigNumberish>,
      openningNum: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerDealCards(
      gameId: PromiseOrValue<BigNumberish>,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      initDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerOpenCards(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerRegister(
      gameId: PromiseOrValue<BigNumberish>,
      signingAddr: PromiseOrValue<string>,
      pkX: PromiseOrValue<BigNumberish>,
      pkY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerShuffle(
      gameId: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      compDeck: CompressedDeckStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryAggregatedPk(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryCardValue(
      gameId: PromiseOrValue<BigNumberish>,
      cardIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryDeck(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shuffle(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cardConfig(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createShuffleGame(
      numPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    curPlayerIndex(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealCardsTo(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      playerId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decryptVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    error(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameState(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecryptRecord(
      gameId: PromiseOrValue<BigNumberish>,
      cardIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumCards(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerIdx(
      gameId: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    largestGameId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openCards(
      gameId: PromiseOrValue<BigNumberish>,
      playerId: PromiseOrValue<BigNumberish>,
      openningNum: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerDealCards(
      gameId: PromiseOrValue<BigNumberish>,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      initDeltas: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerOpenCards(
      gameId: PromiseOrValue<BigNumberish>,
      cards: BitMaps.BitMap256Struct,
      proofs: PromiseOrValue<BigNumberish>[][],
      decryptedCards: CardStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerRegister(
      gameId: PromiseOrValue<BigNumberish>,
      signingAddr: PromiseOrValue<string>,
      pkX: PromiseOrValue<BigNumberish>,
      pkY: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerShuffle(
      gameId: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      compDeck: CompressedDeckStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryAggregatedPk(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryCardValue(
      gameId: PromiseOrValue<BigNumberish>,
      cardIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryDeck(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shuffle(
      gameId: PromiseOrValue<BigNumberish>,
      next: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
